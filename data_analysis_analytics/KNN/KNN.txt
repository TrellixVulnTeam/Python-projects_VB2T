
What is classification?
classification is the problem of identifying to 
which of a set of categories (sub-populations) a new observation belongs, 
on the basis of a training set of data containing observations (or instances) 
whose category membership is known.

Many algorithms have been developed for automated classification, 
and common ones include random forests, support vector machines, 
Naïve Bayes classifiers, 
and many types of neural networks.


What is KNN?
k-Nearest Neighbors algorithm (or k-NN for short) is a non-parametric method used for classification and regression. In both cases, the input consists of the k closest training examples in the feature space.

kNN classifies new instances by grouping them together with the most similar cases.  Here, you will use kNN on the popular (if idealized) iris dataset, which consists of flower measurements for three species of iris flower. Our task is to predict the species labels of a set of flowers based on their flower measurements. Since you’ll be building a predictor based on a set of known correct classifications, kNN is a type of supervised machine learning 


The kNN task can be broken down into writing 3 primary functions:

Calculate the distance between any two points
Find the nearest neighbours based on these pairwise distances
Majority vote on a class labels based on the nearest neighbour list

Dataset
fetch the iris data straight from scikit-learn. Further, you can do a 60/40 train/test split using the train_test_split function, but you could have also randomly assigned the rows yourself (see this type of implementation here). In machine learning, the train/test split is used in order to reduce overfitting – training models on the full dataset tends to lead to the model being overfitted to the noise and peculiarities of the data, rather than the real, underlying trend. You do any sort of model tuning (e.g. picking the number of neighbours, k) on the training set only – the test set acts as a stand-alone, untouched dataset that you use to test your final model performance on.




